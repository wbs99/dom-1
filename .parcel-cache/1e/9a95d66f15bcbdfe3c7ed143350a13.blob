window.dom = {
    create (string) {
        const container = document.createElement('template');
        container.innerHTML = string.trim(); //trim 可以去掉字符串两边的空格
        return container.content.firstChild;
    },
    after (node, node2) {
        //找到这个节点的爸爸，调用爸爸的 insertBefore ,把 node2 插到 node 的下一个节点的前面
        node.parentNode.insertBefore(node2, node.nextSibling);
    },
    before (node, node2) {
        node.parentNode.insertBefore(node2, node);
    },
    append (parent, node) {
        parent.appendChild(node);
    },
    wrap (node, parent) {
        dom.before(node, parent);
        dom.append(parent, node);
    },
    remove (node) {
        //找到节点的爸爸删掉爸爸的儿子
        node.parentNode.removeChild(node);
        return node;
    },
    empty (node) {
        const array = [];
        let x = node.firstChild;
        while(x){
            array.push(dom.remove(node.firstChild));
            x = node.firstChild; //这里的 firstChild 就是原来的 secondChild
        }
        return array;
    },
    attr (node, name, value) {
        //arguments.length 参数的长度
        if (arguments.length === 3) node.setAttribute(name, value);
        else if (arguments.length === 2) return node.getAttribute(name);
    },
    text (node, string) {
        if (arguments.length === 2) {
            if ('innerText' in node) node.innerText = string; //IE
            else node.textContent = string; //Chrome
        } else if (arguments.length === 1) {
            if ('innerText' in node) return node.innerText;
            else return node.textContent;
        }
    },
    html (node, string) {
        if (arguments.length === 2) node.innerHTML = string;
        else if (arguments.length === 1) return node.innerHTML;
    },
    style (node, name, value) {
        if (arguments.length === 3) // dom.style(div, 'color', 'red')
        node.style[name] = value;
        else if (arguments.length === 2) {
            if (typeof name === 'string') // dom.style(div, 'color')
            return node.style[name];
            else if (name instanceof Object) {
                // dom.style(div, {color: 'red'})
                const object = name;
                for(let key in object)node.style[key] = object[key];
            }
        }
    },
    class: {
        add (node, className) {
            node.classList.add(className);
        },
        remove (node, className) {
            node.classList.remove(className);
        },
        has (node, className) {
            return node.classList.contains(className);
        }
    },
    on (node, eventName, fn) {
        node.addEventListener(eventName, fn);
    },
    off (node, eventName, fn) {
        node.removeEventListener(eventName, fn);
    }
};
